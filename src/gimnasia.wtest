import gimnasia.*

describe "PUNTO 1: Rutinas." {

	const correrEnLaPlaya = new Running(intensidad = 1.2) // Una actividad de running con intensisdad 1.2
	const maratonBA = new Maraton(intensidad = 1.5) // Una maraton con intensidad 1.5
	const remarEnElDelta = new Remo() // Una actividad de remo
	const remarEnCaminoRemeros = new RemoCompetitivo() // Una actividad de remo comptetitivo

	test "1.1: Consulta Running." {
		assert.equals(360, correrEnLaPlaya.cuantasCaloriasQuemaEn(5)) // Deberia gastar 360 calorias al practicarse por 5 minutos.
		assert.equals(10200, correrEnLaPlaya.cuantasCaloriasQuemaEn(90)) // Deberia gastar 10200 calorias al practicarse por 90 minutos.
	}

	test "1.2: Consulta Maraton." {
		assert.equals(900, maratonBA.cuantasCaloriasQuemaEn(5)) // Deberia gastar 900 calorias al practicarse por 5 minutos.
		assert.equals(25500, maratonBA.cuantasCaloriasQuemaEn(90)) // Deberia gastar 25500 calorias al practicarse por 90 minutos.
	}

	test "1.3: Consulta Remo." {
		assert.equals(520, remarEnElDelta.cuantasCaloriasQuemaEn(5)) // Deberia gastar 520 calorias al practicarse por 5 minutos.
		assert.equals(9360, remarEnElDelta.cuantasCaloriasQuemaEn(90)) // Deberia gastar 9360 calorias al practicarse por 90 minutos.
	}
	
	test "1.4: Consulta Remo Competitivo." {
		assert.equals(510, remarEnCaminoRemeros.cuantasCaloriasQuemaEn(5)) // Deberia gastar 510 calorias al practicarse por 5 minutos.
		assert.equals(12750, remarEnCaminoRemeros.cuantasCaloriasQuemaEn(90)) // Deberia gastar 12750 calorias al practicarse por 90 minutos.
	}
}

describe "PUNTO 2: Personas." {

	const calamardo = new PersonaSedentaria(peso = 60) // Una persona Sedentaria con peso 60 y tiempo de ejercicio 5.
	const bob = new PersonaAtleta(peso = 40) // Una persona atleta con peso 40.

	const correrEnLaPlaya = new Running(intensidad = 1.2) // Una actividad de running con intensisdad 1.2
	const maratonBA = new Maraton(intensidad = 1.5) // Una maraton con intensidad 1.5
	const remarEnElDelta = new Remo() // Una actividad de remo
	const remarEnCaminoRemeros = new RemoCompetitivo() // Una actividad de remo comptetitivo

	test "2.1.1: Consulta sedentario running." {
		calamardo.practicar(correrEnLaPlaya) // Hacer que Calamardo practique correrEnLaPlaya.
		assert.equals(59.948, calamardo.peso().truncate(3)) // El peso de Calamardo debería ser 59.948 (truncado a 3 decimales).
	}
	
	test "2.1.2: Consulta sedentario maraton." {
		calamardo.practicar(maratonBA) // Hacer que Calamardo practique maratonBA.
		assert.equals(59.871, calamardo.peso().truncate(3)) // El peso de Calamardo debería ser 59.871 (truncado a 3 decimales).
	}

	test "2.1.3: Consulta sedentario remo." {
		calamardo.practicar(remarEnElDelta) // Hacer que Calamardo practique remarEnElDelta.
		assert.equals(59.925, calamardo.peso().truncate(3)) // El peso de Calamardo debería ser 59.925 (truncado a 3 decimales).
	}

	test "2.1.4: Consulta sedentario remo competicion." {
		calamardo.practicar(remarEnCaminoRemeros) // Hacer que Calamardo practique remarEnCaminoRemeros.
		assert.equals(59.927, calamardo.peso().truncate(3)) // El peso de Calamardo debería ser 59.927 (truncado a 3 decimales).
	}

	test "2.1.5: Consulta sedentario no puede practicar." {
		calamardo.peso(40) // Hacer que el peso de Calamardo sea 40.
		assert.throwsException({calamardo.practicar(correrEnLaPlaya)}) // Hacer que Calamardo practique correrEnLaPlaya (NO SE PUEDE).
		assert.equals(40, calamardo.peso()) // El peso de Calamardo debería ser 40.
	}

	test "2.2.1: Consulta atleta running." {
		bob.practicar(correrEnLaPlaya) // Hacer que Bob practique correrEnLaPlaya.
		assert.equals(39.725, bob.peso().truncate(3)) // El peso de Bob debería ser 39.725 (truncado a 3 decimales).
	}

	test "2.2.2: Consulta atleta maraton." {
		bob.practicar(maratonBA) // Hacer que Bob practique maratonBA.
		assert.equals(37.812, bob.peso().truncate(3)) // El peso de Bob debería ser 37.812 (truncado a 3 decimales).
	}

	test "2.2.3: Consulta atleta remo." {
		assert.throwsException({bob.practicar(remarEnElDelta)})// Hacer que Bob practique remarEnElDelta (NO SE PUEDE).
		assert.equals(40, bob.peso()) // El peso de Bob debería ser 40.
	}
	
	test "2.2.4: Consulta atleta remo de competición." {
		bob.practicar(remarEnCaminoRemeros) // Hacer que Bob practique remarEnCaminoRemeros.
		assert.equals(39.406, bob.peso().truncate(3)) // El peso de Bob debería ser 39.406.
	}
}

describe "PUNTO 3: Consultas." {

	// ############################################### CLUBES Y PREDIOS ###############################################


	const clubBarrial = new Club(predios = #{nautico, recreo}) // Un club con náutico y recreo.
	const nautico = new Predio(rutinas = #{remarEnElDelta, remarEnCaminoRemeros}) // Un predio con remarEnElDelta y remarEnCaminoRemeros.
	const recreo = new Predio(rutinas = #{correrEnLaPlaya, maratonBA}) // Un predio con correrEnLaPlaya y maratonBA.

	// ################################################### PERSONAS ###################################################

	const calamardo = new PersonaSedentaria(peso = 60) // Una persona Sedentaria con peso 60 y tiempo de ejercicio 5.
	const bob = new PersonaAtleta(peso = 40) // Una persona atleta con peso 40.

	// #################################################### RUTINAS ###################################################

	const correrEnLaPlaya = new Running(intensidad = 1.2) // Una actividad de running con intensisdad 1.2
	const maratonBA = new Maraton(intensidad = 1.5) // Una maraton con intensidad 1.5
	const remarEnElDelta = new Remo() // Una actividad de remo
	const remarEnCaminoRemeros = new RemoCompetitivo() // Una actividad de remo comptetitivo

	test "3.1: El mejor predio." {
		assert.that(clubBarrial.mejorPredioPara(bob) == recreo) // El mejor predio del clubBarrial para Bob debería ser recreo.
		assert.that(clubBarrial.mejorPredioPara(calamardo) == recreo) // El mejor predio del clubBarrial para Calamardo debería ser recreo.
	}
	
	test "3.2: Predios tranquis." {
		assert.that(clubBarrial.prediosTranquisPara(bob).isEmpty()) // No debería haber predios tranquis en el clubBarrial para Bob.
		assert.that(clubBarrial.prediosTranquisPara(calamardo) == #{recreo}) // Los predios tranquis del clubBarrial para Calamardo solo incluyen a recreo.
	}
	
	test "3.3: Rutinas más exigentes." {
		assert.that(clubBarrial.rutinasMasExigentesPara(bob) == #{maratonBA, remarEnCaminoRemeros}) // Las rutinas más exigentes del clubBarrial para Bob son maratonBA y remarEnCaminoRemeros.
		assert.that(clubBarrial.rutinasMasExigentesPara(calamardo) == #{maratonBA, remarEnElDelta}) // Las rutinas más exigentes del clubBarrial para Calamardo son maratonBA y remarEnElDelta.
	}
}